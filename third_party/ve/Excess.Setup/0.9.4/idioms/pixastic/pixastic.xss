<xss:parameter id="obj"/>

<xss:code>
if(obj.type.id == "preset")
{
	out()
    {
	    var <xss:e v="obj.id"/> = <xss:e v="compiler.instantiate(obj)"/> ;
	}
}
else 
{
	var type = obj.type;
	var params = type.constructor_params;
	var rect = "null";
	string parent_id = obj.parent.id;
	if(obj.parent.type.id == "image")
		parent_id = "streamer.get_resource('"+obj.parent.id+"')";	
	if(obj.parent.hasimagedata || obj.parent.type.id == "preset")
		out()
		{
			<xss:e v="parent_id"/>.<xss:e v="obj.id"/> = new <xss:e v="type.output_id"/>(
		}
	else
	{
		parent_id = obj.id + "_parent";
		out()
		{	
			var <xss:e v="obj.id"/>_parent = {};
			var <xss:e v="obj.id"/> = new <xss:e v="type.output_id"/>(
		}
	}
	if(type.constructor_params)
	{
		for(var p in type.constructor_params)
		{				
			if (p.property)
			{					
				var prop = obj.get_property(p.property);			
				if(prop.value != null)
				{
					if(prop.use_plain_value)
						out() {<xss:e v="prop.value"/>,}
					else
						out() {<xss:e v="prop.render_value()"/>,}			    			
				}else
					out() {null,}
			}			        
		}
	}
	for(var child in obj.children)
	{
		if(child.class_name == "rect" && child.left && child.top && child.width && child.height)
		{		
			rect =	'{left: '+child.left+', top: '+child.top+', width: '+child.width+', height: '+child.height+'}';	
		}
	}	
	out(){<xss:e v="rect"/>, <xss:e v="parent_id"/>);}
	if(!obj.parent.hasimagedata && obj.parent.type.id != "preset")	
		out()
		{
			<xss:e v="parent_id"/>.<xss:e v="obj.id"/> = <xss:e v="obj.id"/>;
		}	
	out()
	{		
		if(!<xss:e v="parent_id"/>.filters)
			<xss:e v="parent_id"/>.filters = [];
		<xss:e v="parent_id"/>.filters.push(<xss:e v="parent_id"/>.<xss:e v="obj.id"/>);
	}		
	
	compiler.xss("../common-js/instance.xss", obj, path = parent_id);
	if(obj.parent.hasimagedata)
		out()
		{
			obtain_image(<xss:e v="parent_id"/>.<xss:e v="obj.id"/>, <xss:e v="parent_id"/>);
			<xss:e v="parent_id"/>.put_on_apply = true;
		}		
}
</xss:code>
