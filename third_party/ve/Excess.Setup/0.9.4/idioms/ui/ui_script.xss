<xss:parameter id="canvas_name"/>

var drawingCanvas;	
var streamer;	
var g_ui;
var g_elapsed = -1;
var g_delta = 0.0;
var g_canvas;
var g_ui_root;
var application = {};
var app_width = <xss:e value="application.width"/>;
var app_height = <xss:e value="application.height"/>;

application.events = new ev.EventHolder();
var SoundUtils = new ui.SoundUtils();
		
<xss:code>
    compiler.inject("render_initialization");
	compiler.inject("render_resources");
</xss:code>
var canvas_position = {x:0, y:0};
function start(resolution)  
{  
	function updater()  
	{
		canvas_position = getElementPosition(drawingCanvas);
		var now   = new Date().getTime();
        if (g_elapsed < 0)
            g_delta = 0; //first update
        else
		    g_delta  = now - g_elapsed;  
		
        g_elapsed = now; 
              
        <xss:code>
            compiler.inject("render_update");
        </xss:code>
		
		application.events.dispatch("update", [g_delta, g_elapsed]);			
		var context = g_canvas.getContext('2d');
		g_ui.update(g_delta, context);
		window.setTimeout(updater, resolution);  
	}    
	window.setTimeout(updater, resolution);  
}  

<xss:marker id="variables"/>

<xss:code>
compiler.inject("render_types");
compiler.render_app_types("../common-js/resig-class.xss");
compiler.xss("../common-js/instance.xss", application);
</xss:code>

window.onload = function()
{
    <xss:code>
	var elementId = canvas_name;
    if (!elementId)
        elementId = application.canvasElement;
    
    out()
    {
        drawingCanvas = document.getElementById("<xss:e value="elementId"/>");
    }
    </xss:code>
    g_canvas = drawingCanvas;
	
	if (drawingCanvas && drawingCanvas.getContext)
	{
		var client =
		{
			width: <xss:e value="application.width"/>,
			height: <xss:e value="application.height"/>,
			canvas: drawingCanvas
		};
            							
		var ui_ = new ui.Manager(client, streamer);
		
		g_ui = ui_;
        g_ui_root = ui_.root;
     	ui_.load_resources(function()
		{
			<xss:code>			
			compiler.inject("render_instances");   
			compiler.inject("render_inst_elems"); 
            </xss:code>
			
			document.onkeydown = function(ev)
			{
				ui_.keydown(ev.keyCode);                  
			};
			document.onkeyup = function(ev)
			{
				ui_.keyup(ev.keyCode);                  
			};
			document.onkeypress = function(ev)
			{
				ui_.keypress(ev.keyCode);                  
			};			
		
			drawingCanvas.onmousemove = function(ev)
			{
				ui_.mousemove(ev.clientX - canvas_position.x, ev.clientY - canvas_position.y);                  
			};
			drawingCanvas.onmousedown = function(ev)
			{
				ui_.mousedown(ev.clientX - canvas_position.x, ev.clientY - canvas_position.y);                  
			};
			drawingCanvas.onmouseup = function(ev)
			{
				ui_.mouseup(ev.clientX - canvas_position.x, ev.clientY - canvas_position.y);                  
			};		
			ui_.events.addListener("mousedown", function(x,y)
			{    
				application.events.dispatch("mousedown", [x, y]);
			});
			ui_.events.addListener("mouseup", function(x,y)
			{    
				application.events.dispatch("mouseup", [x, y]);
			});
			ui_.events.addListener("mousemove", function(x,y)
			{    
				application.events.dispatch("mousemove", [x, y]);
			});
			ui_.events.addListener("click", function(x,y)
			{    
				application.events.dispatch("click", [x, y]);
			});
			ui_.events.addListener("drag", function(x,y)
			{    
				application.events.dispatch("drag", [x, y]);
			});
			ui_.events.addListener("dragend", function(x,y)
			{    
				application.events.dispatch("dragend", [x, y]);
			});
			ui_.events.addListener("keyup", function(keycode)
			{    
				application.events.dispatch("keyup", [keycode]);
			});
			ui_.events.addListener("keydown", function(keycode)
			{    
				application.events.dispatch("keydown", [keycode]);
			});
			ui_.events.addListener("keypress", function(keycode)
			{    
				application.events.dispatch("keydown", [keycode]);
			});

            application.events.dispatch("init", []);
    
            start();			
			ui_.draw(drawingCanvas.getContext('2d'));
		});
	}
}
