"Name"     = 'xs'
"Author"   = 'Emilio Santos'
"Version"  = '3.0'
"About"    = 'XS Language'

"Start Symbol" = <Program>

! ----------------------------------------------------------------- Sets

{ID Head}        = {Letter} + [_]
{ID Tail}        = {AlphaNumeric} + [_]
{String Ch}      = {Printable} - ["]
{Char Ch}        = {Printable} - ['']
{Hex Digit}      = {Digit} + [abcdef] + [ABCDEF]

! ----------------------------------------------------------------- Terminals

Identifier     = [@]? {ID Head} {ID Tail}*        !The @ is an override char

MemberName     =  '.' {ID Head} {ID Tail}*       

DecLiteral     = {Digit}+            ( [UuLl] | [Uu][Ll] | [Ll][Uu] )?
HexLiteral     = '0'[xX]{Hex Digit}+ ( [UuLl] | [Uu][Ll] | [Ll][Uu] )?
RealLiteral    = {Digit}*'.'{Digit}+

StringLiteral  = '"'( {String Ch} | '\'{Printable} )* '"'
CharLiteral    = '' ( {Char Ch} | '\'{Printable} )* ''

DSLIdentifier    = '@''@'{ID Head} {ID Tail}*

! ----------------------------------------------------------------- Comments

Comment Line = '//'
Comment Start = '/*'
Comment End = '*/'


! ----------------------------------------------------------------- Ids

<Qualified ID>
       ::= Identifier <Member List>

<Member List>
       ::= <Member List> MemberName
        |  !Zero or more 

! ----------------------------------------------------------------- Literals

<Literal>
       ::= true 
        |  false
        |  DecLiteral
        |  HexLiteral
        |  RealLiteral
        |  CharLiteral
        |  StringLiteral
        |  null

! ----------------------------------------------------------------- Expressions

<Expression Opt>
       ::= <Expression>
        |  !Nothing 

<Expression List>
       ::= <Expression>
        |  <Expression> ',' <Expression List> 


<Expression>
       ::= <Conditional Exp> '='   <Expression>
        |  <Conditional Exp> '+='  <Expression>
        |  <Conditional Exp> '-='  <Expression>
        |  <Conditional Exp> '*='  <Expression>
        |  <Conditional Exp> '/='  <Expression>
        |  <Conditional Exp> '<<=' <Expression>
        |  <Conditional Exp> '>>=' <Expression>
        |  <Conditional Exp>

<Conditional Exp>      
       ::= <Or Exp> '?' <Or Exp> ':' <Conditional Exp>
        |  <Or Exp>

<Or Exp>
       ::= <Or Exp> '||' <And Exp>
        |  <And Exp>

<And Exp>
       ::= <And Exp> '&&' <Equality Exp>
        |  <Equality Exp>

<Equality Exp>  
       ::= <Equality Exp> '==' <Compare Exp>
        |  <Equality Exp> '!=' <Compare Exp>
        |  <Compare Exp>

<Compare Exp>
       ::= <Compare Exp> '<'  <Shift Exp>
        |  <Compare Exp> '>'  <Shift Exp>
        |  <Compare Exp> '<=' <Shift Exp>
        |  <Compare Exp> '>=' <Shift Exp>
        |  <Compare Exp> as <Shift Exp>
        |  <Compare Exp> is <Shift Exp>
        |  <Compare Exp> has <Shift Exp>
        |  <Shift Exp>

<Shift Exp>
       ::= <Shift Exp> '<<' <Add Exp>
        |  <Shift Exp> '>>' <Add Exp>
        |  <Add Exp>

<Add Exp>
       ::= <Add Exp> '+' <Mult Exp>
        |  <Add Exp> '-' <Mult Exp>
        |  <Mult Exp>

<Mult Exp>
       ::= <Mult Exp> '*' <Unary Exp>  
        |  <Mult Exp> '/' <Unary Exp>  
        |  <Mult Exp> '%' <Unary Exp>  
        |  <Unary Exp>  

<Unary Exp>  
       ::= '!'  <Unary Exp>
        |  '-'  <Unary Exp>
        |  '++' <Unary Exp>
        |  '--' <Unary Exp>
        |  <Method Exp> 

<Method Exp>
       ::= <Method Exp> <Method>
        |  <Primary Exp>

<Method>
        ::= MemberName
         |  MemberName '(' <Arg List Opt> ')'    !Invocation
         |  '[' <Expression List> ']' 
         |  '++'
         |  '--'     

<Primary Exp>
       ::= <Primary>
        |  new <Type> '(' <Arg List Opt> ')'    !Instantiation
        |  '(' <Expression> ')' 

<Array Literal>
    ::= '[' <Arg List Opt> ']'
       
<Primary>
       ::= Identifier
     |  <Array Literal> 
        |  Identifier '(' <Arg List Opt> ')'    !Current object method
        |  <Literal>        

! ----------------------------------------------------------------- Arguments

<Arg List Opt>
       ::= <Arg List>
        |  !Nothing
       
<Arg List>
       ::= <Arg List> ',' <Argument>
        |  <Argument>

<Argument>
       ::= Identifier '=' <Conditional Exp>
       |  <Conditional Exp>
            
! ----------------------------------------------------------------- Types


<Type>
    ::= Identifier '<' <Type Arg List> '>'
    |   Identifier  

<Type Arg List>
       ::= <Type Arg List> ',' <Type Argument>
        |  <Type Argument>

<Type Argument>
       ::= Identifier '=' <Primary Exp>
       |   <Primary Exp>
    

! ----------------------------------------------------------------- DSLs

<DSL>
    ::= DSLIdentifier Identifier '(' <Arg List Opt> ')' '@' DecLiteral
     |  DSLIdentifier '(' <Arg List Opt> ')' '@' DecLiteral
     |  DSLIdentifier '@' DecLiteral

! ----------------------------------------------------------------- Code
<Stm List>
       ::= <Stm List> <Statement>
        |  <Statement>

<Statement>
       ::=  <Local Var Decl> ';'
        |   if       '(' <Expression> ')' <Statement>
        |   if       '(' <Expression> ')' <Statement> else <Statement>        
        |   for      '(' <For Init Opt> ';' <For Condition Opt> ';' <For Iterator Opt> ')' <Statement>
        |   for     '(' <Type> Identifier in <Expression> ')' <Statement>  
        |   while    '(' <Expression> ')' <Statement>
        |   switch   '(' <Switch Header> ')' '{' <Switch Sections Opt> '}'
        |   dispatch <Qualified ID> '(' <Arg List Opt> ')' ';'
        |   break ';'
        |   continue ';'
        |   return <Expression Opt> ';'
        |   try <Block> <Catch Clauses> <Finally Clause Opt>
        |   throw <Expression> ';'
        |   <Expression> ';'        
        |   <Block>    
        |   <DSL>     

<Catch Clauses>
        ::= <Catch Clause> <Catch Clauses>
         |  !Nothing

<Catch Clause>
        ::= catch '(' <Type> Identifier ')' <Block>
         |  catch '(' <Type>            ')' <Block>
         |  catch <Block>

<Finally Clause Opt>
        ::= finally <Block>
         |  !Nothing

<Block>
       ::= '{' <Stm List> '}'
        |  '{' '}' 
         
<Local Var Decl> 
     ::= <Type> <Variable Declarator>

<Variable Declarator>
        ::= Identifier
         |  Identifier '=' <Expression>

<Switch Header>
        ::= <Expression>
         |  !Nothing

<Switch Sections Opt>
        ::= <Switch Sections Opt> <Switch Section>
         |  !Nothing

<Switch Section>
        ::= <Switch Labels> <Stm List>

<Switch Labels>
        ::= <Switch Label>
         |  <Switch Labels> <Switch Label>

<Switch Label>
        ::= case <Expression> ':'
         |  default ':'

<For Init Opt>
        ::= <Local Var Decl>
         |  <Expression>
         |  !Nothing

<For Iterator Opt>
        ::= <Expression>
         |  !Nothing 

<For Condition Opt>
        ::= <Expression>
         |  !Nothing 


! ----------------------------------------------------------------- High level constructs
<Construct List>
       ::= <Construct List> <Construct>
        |  <Construct>

<Construct Block>
       ::= '{' <Construct List> '}'
        |  '{' '}' 

<Adj List>
    ::= <Adj List> <Adjetive>
     |  <Adjetive>  

<Adjetive>
    ::= delegate 
     |  public
     |  private
     |  class

<Arg Decl List Opt>
       ::= <Arg Decl List>
        |  !Nothing
       
<Arg Decl List>
       ::= <Arg Decl List> ',' <Argument Decl>
        |  <Argument Decl>

<Argument Decl>
       ::= <Type> Identifier '=' <Expression>
       |   <Type> Identifier
    |   Identifier  

<Class Arg Decl List>
       ::= <Class Arg Decl List> ',' <Class Argument Decl>
        |  <Class Argument Decl>

<Class Argument Decl>
       ::= Identifier '=' <Primary Exp>
       |   Identifier

<Class Arg List Opt>
    ::= '<' <Class Arg Decl List> '>'
    |   !Nothing
    
<Construct>
       ::=  <Adj List> <Property>
     |   <Adj List> <Method Decl>
     |   <Property>
     |   <Method Decl>
     |   instance <Qualified ID> <Type Opt> <Construct Block>
     |   class Identifier <Class Arg List Opt> <Type Opt> <Construct Block>
     |   behaviour Identifier <Type Opt> <Construct Block>
     |   on <Qualified ID> '(' <Arg Decl List Opt> ')' <Block>
     |   const Identifier '=' <Expression> ';'
     |   event Identifier '(' <Arg Decl List Opt> ')' ';'
     |   behave as Identifier <Block>
     |   behave as Identifier ';'
     |   <Expression> '->' <Expression>';'
     |   <DSL>

<Property>
    ::=  property Identifier <Type Opt> <Prop Descriptor>
     |   <Local Var Decl> ';'
     
<Method Name>
    ::= method 
     |  function


<Method Decl>
    ::=  <Method Name> Identifier '(' <Arg Decl List Opt> ')' <Type Opt> <Block>
     |   <Type> Identifier '(' <Arg Decl List Opt> ')' <Block>

<Type Opt>
    ::=  ':' <Type>
     |   !Nothing   

<Prop Descriptor>
    ::=  <Block>
     |   '=' <Block> <Block>
     |   '=' <Block>
     |   '=' <Expression> <Block>
     |   '=' <Expression> ';'
     |   ';'        

! ----------------------------------------------------------------- Main

<Program>
    ::= <Block>
     |  <Construct List>
     |  <Expression>
