grammar com.xkp.codexcess.Xss hidden(WS, ML_COMMENT, SL_COMMENT)
											
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate xss "http://www.xkp.com/codexcess/Xss"

Program
	:	program = (Block
	|	ConstructList
	|	Expression)
	;


//------------------------------------------------- High level constructs
ConstructList
	:	construct += Construct+
	;

ConstructBlock
	:	{ConstructBlock} '{' construct = ConstructList? '}'
	;

AdjList
	:	adjList += Adjective+
	;

Adjective
	:	adj = ('delegate'
	|	'public'
	|	'private'
	|	'class')
	;

ArgDeclListOpt
	:	{ArgDeclListOpt} argDecl = ArgDeclList?
	;

ArgDeclList
	:	argDeclList += ArgumentDecl (',' argDeclList += ArgumentDecl)*
	;

ArgumentDecl
	:	type = Type? name = IDENTIFIER ('=' expr = Expression)?
	;

ClassArgDeclList
	:	classArgDecl += ClassArgumentDecl (',' classArgDecl += ClassArgumentDecl)*
	;

ClassArgumentDecl
	:	name = IDENTIFIER ('=' expr = PrimaryExpr)?
	;

ClassArgListOpt
	:	{ClassArgListOpt} ('<' classArgDecl = ClassArgDeclList '>')?
	;

Construct
	:	adjList = AdjList? prop = Property
	|	adjList = AdjList? mthdDecl = MethodDecl
	|	'instance' instName = QualifiedID type = TypeOpt construct = ConstructBlock
	|	'class' className = IDENTIFIER classArgList = ClassArgListOpt type = TypeOpt construct = ConstructBlock
    |   'behaviour' behaveName = IDENTIFIER type = TypeOpt construct = ConstructBlock
    |   'on' eventName = QualifiedID '(' argDeclList = ArgDeclListOpt ')' block = Block
    |   'const' constName = IDENTIFIER '=' expr = Expression ';'
    |	'event' eventDecl = IDENTIFIER '(' argDeclList = ArgDeclListOpt ')' ';'
	|	'behave' 'as' name = IDENTIFIER block = Block
	|	'behave' 'as' name = IDENTIFIER ';'
	|	firstExpr = Expression '->' secndExpr = Expression ';'
	|	dsl = DSL
	;

Property
	:	'property' name = IDENTIFIER type = TypeOpt descript = PropDescriptor
	|	varDecl = LocalVarDecl ';'
	;

MethodName
	:	mthd = ('method'
	|	'function')
	;

MethodDecl
	:	mthdType = MethodName name = IDENTIFIER '(' argDeclList = ArgDeclListOpt ')' type = TypeOpt block = Block
	|	type = Type name = IDENTIFIER '(' argDeclList = ArgDeclListOpt ')' block = Block
	;

TypeOpt
	:	{TypeOpt} (':' type = Type)?
	;

PropDescriptor
	:	{PropDescriptor} (block = Block
	|	'=' setBlock = Block getBlock = Block?
	|	'=' expr = Expression block = Block
	|	('=' expr = Expression)? ';')
	;


//------------------------------------------------- Code
StmList
	:	stmt += Statement+
	;

Statement
	:	{Statement} (varDecl = LocalVarDecl ';'
	|	'if' '(' expr += Expression ')' stmt += Statement ('else' stmt += Statement)?
	|	'for' '(' expr += ForInitOpt ';' expr += ForConditionOpt ';' expr += ForIteratorOpt ')' stmt += Statement
	|	'for' '(' type = Type id = IDENTIFIER 'in' expr += Expression ')' stmt += Statement
	|	'while' '(' expr += Expression ')' stmt += Statement
	|	'switch' '(' expr += SwitchHeader ')' '{' stmt += SwitchSectionsOpt '}'
	|	'dispatch' name = QualifiedID '(' argListOpt = ArgListOpt ')'
	|	'break' ';'
	|	'continue' ';'
	|	'return' expr += ExpressionOpt ';'
	|	'try' block = Block stmt += CatchClauses stmt += FinallyClausesOpt
	|	'throw' expr += Expression ';'
	|	expr += Expression ';'
	|	block = Block
	|	dsl = DSL)
	;

CatchClauses
	:	{CatchClauses} clauses += CatchClause*
	;

CatchClause
	:	'catch' ('(' Type IDENTIFIER? ')')? block = Block
	;

FinallyClausesOpt
	:	{FinallyClausesOpt} ('finally' block = Block)?
	;

Block
	:	{Block} '{' stmtList = StmList? '}'
	;

LocalVarDecl
	:	type = Type varDecl = VariableDeclarator
	;

VariableDeclarator
	:	name = IDENTIFIER ('=' expr = Expression)?
	;

SwitchHeader
	:	{SwitchHeader} expr = Expression?
	;

SwitchSectionsOpt
	:	{SwitchSectionsOpt} section += SwitchSection*
	;

SwitchSection
	:	labels = SwitchLabels stmt = StmList
	;

SwitchLabels
	:	label += SwitchLabel+
	;

SwitchLabel
	:	{SwitchLabel} ('case' expr = Expression ':'
	|	'default' ':')
	;

ForInitOpt
	:	{ForInitOpt} expr = (LocalVarDecl | Expression)?
	;

ForIteratorOpt
	:	{ForIteratorOpt} expr = Expression?
	;

ForConditionOpt
	:	{ForConditionOpt} expr = Expression?
	;


//------------------------------------------------- DSLs
DSL
	:	dsl = DSLIdentifier (id = IDENTIFIER? '(' argListOpt = ArgListOpt ')')? '@' DEC_LITERAL
	;


//------------------------------------------------- Expressions
ExpressionOpt
	:	{ExpressionOpt} exprOpt = Expression?
	;

ExpressionList returns Expression
	:	exprList += Expression (',' exprList += Expression)*
	;

Expression returns Expression
	:	expr += ConditionalExpr (('='|'+='|'-='|'*='|'/='|'<<='|'>>=') expr += ConditionalExpr)*
	;

ConditionalExpr returns Expression
	:	expr += OrExpr ('?' expr += OrExpr ':' expr += ConditionalExpr)?
	;

OrExpr returns Expression
	:	expr += AndExpr ('||' expr += AndExpr)*
	;

AndExpr returns Expression
	:	expr += EqualityExpr ('&&' expr += EqualityExpr)*
	;

EqualityExpr returns Expression
	:	expr += CompExpr (('=='|'!=') expr += CompExpr)*
	;

CompExpr returns Expression
	:	expr += ShiftExpr (('<'|'>'|'<='|'>='|'as'|'is'|'has') expr += ShiftExpr)*
	;

ShiftExpr returns Expression
	:	expr += AddExpr (('<<'|'>>') expr += AddExpr)*
	;

AddExpr returns Expression
	:	expr += MultExpr (('+'|'-') expr += MultExpr)*
	;

MultExpr returns Expression
	:	expr += UnaryExpr (('*'|'/'|'%') expr += UnaryExpr)*
	;

UnaryExpr returns Expression
	:	'!' expr += UnaryExpr
	|	'-' expr += UnaryExpr
	|	'++' expr += UnaryExpr
	|	'--' expr += UnaryExpr
	|	expr += MethodExpr
	;

MethodExpr returns Expression
	:	expr += PrimaryExpr+ expr += Method*
	;

Method
	:	{Method} (name = MEMBER_NAME ( '(' argListOpt = ArgListOpt ')' )?
	|	'[' exprList = ExpressionList ']'
	|	'++'
	|	'--')
	;

ObjectListOpt
	:	{ObjectList} objListOpt = ObjectList?
	;

ObjectList
	:	objList += ObjectValue (',' objList += ObjectValue)*;

ObjectValue
	:	obj = IDENTIFIER ':' expr = Expression
	;

PrimaryExpr
	:	primary = Primary
	|	'new' type = Type '(' argListOpt = ArgListOpt ')'
	|	'{' objListOpt = ObjectListOpt '}'
	|	('(' expr = Expression ')')
	;

ArrayLiteral
	:	'[' argListOpt = ArgListOpt ']'
	;

Primary
	:	primary = IDENTIFIER ( '(' argListOpt = ArgListOpt ')' )?
	|	ArrayLiteral
	|	Literal
	;


//------------------------------------------------- Types
Type
	:	type = IDENTIFIER ('<' typeList = TypeArgList '>')?
	;

TypeArgList
	:	typeList += TypeArgument (',' typeList += TypeArgument)*
	;

TypeArgument
	:	(type = IDENTIFIER '=')? primary = PrimaryExpr
	;


//------------------------------------------------- Arguments
ArgListOpt
	:	{ArgList}argListOpt = ArgList?
	;

ArgList
	:	argsList += Argument (',' argsList += Argument)*
	;

Argument
	:	(arg = IDENTIFIER '=')? cond = ConditionalExpr
	;


//------------------------------------------------- Literals
Literal
	:	{Literal} (literal = 'true'
	|	'false'
	|	'null'
	|	DEC_LITERAL
	|	HEX_LITERAL
	|	REAL_LITERAL
	|	CHAR_LITERAL
	|	STRING_LITERAL)
	;

//------------------------------------------------- IDs
DSLIdentifier
	:	'@' IDENTIFIER
	;

MemberList
	:	(members += MEMBER_NAME)+
	;

QualifiedID
	:	name = IDENTIFIER (member = MemberList)?
	;

terminal MEMBER_NAME
	:	'.' IDENTIFIER
	;

terminal IDENTIFIER
	:	('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
	;

terminal REAL_LITERAL
	:	('0'..'9')* '.' DEC_LITERAL
	;

terminal DEC_LITERAL returns ecore::EInt
	:	('0'..'9')+
	;

terminal HEX_LITERAL
	:	'0' ('x'|'X') ('0'..'9'|'A'..'F'|'a'..'f')+
	;

terminal CHAR_LITERAL
	:	"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") ) "'"
	;

terminal STRING_LITERAL
	:	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' 
	|	"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	; 

terminal ML_COMMENT	
	:	'/*' -> '*/'
	;

terminal SL_COMMENT
	:	'//' !('\n'|'\r')* ('\r'? '\n')?
	;

terminal WS
	:	(' '|'\t'|'\r'|'\n')+
	;

terminal ANY_OTHER
	:	.
	;
 