<xss:class entry_point="generate">

	method generate_clazz(clazz, parent){
		
		if (parent){
			if(clazz.class_name == "scene"){
				out(){
				var scene = new <xss:e value = "clazz.inst_class"/>(
				}
			}else
			if(clazz.class_name == "camera" || clazz.class_name == "quake_camera"){
				clazz.id = "camera";
				out(){
				var camera = new <xss:e value = "clazz.inst_class"/>(
				}
			}else
			if(clazz.super == "meshable"){
				out(){
				var <xss:e value = "clazz.id"/> = new THREE.Mesh(new <xss:e value = "clazz.inst_class"/>(
				}
			}else
			if(clazz.super != "transform"){
				out(){
				var <xss:e value = "clazz.id"/> = new <xss:e value = "clazz.inst_class"/>(
				}
			}
			if (clazz.parameters && clazz.class_name != "bin_loader"){
				int j = 0;
				for(int i = 0; i < clazz.parameters.size; i++){							
					var param = clazz.parameters[i];
					if(compiler.evaluate_property(clazz, param.property_name) != null && param.property_name != materials){
						if (j > 0){
							out(dont_break = true) {,}
						}									
						out(dont_break = true, trim = true){								
						<xss:e value = "compiler.evaluate_property(clazz, param.property_name)"/>
						}
						j++;
					}
				}
			}
			
			if(clazz.super == "meshable"){
				out(){
				),<xss:e value = "clazz.materials"/>);
				scene.addObject(<xss:e value = "clazz.id"/>);
				}
			}else
			if(clazz.super == "light"){
				out(){
				);
				scene.addLight(<xss:e value = "clazz.id"/>);
				}
			}else
			if(clazz.super == "transform"){
				if(clazz.x!=null) 
				out(){<xss:e value = "parent.id"/>.<xss:e value = "clazz.class_name"/>.x = <xss:e value = "clazz.x"/>;}
				if(clazz.y!=null) 
				out(){<xss:e value = "parent.id"/>.<xss:e value = "clazz.class_name"/>.y = <xss:e value = "clazz.y"/>;}
				if(clazz.z!=null) 
				out(){<xss:e value = "parent.id"/>.<xss:e value = "clazz.class_name"/>.z = <xss:e value = "clazz.z"/>;}
			}else
			if (clazz.class_name == "bin_loader" ){
				out(){
				<xss:e value = "cmp.id"/>.load(
					<xss:open_brace/>
					model : <xss:e value = "clazz.model"/>, callback : function( geometry )
						 <xss:open_brace/>
							<xss:e value = "clazz.callback"/>;
						 <xss:close_brace/> 
					<xss:close_brace/> 
				);	
				} 
			}else
				out(){
				);
				}
		}
		if (clazz.children){
			for(var child in clazz.children)
				generate_clazz(child, clazz);
		}
		if(clazz.super != "transform")	
			project.render_instance(clazz, "instance.xss", indent = 2);
		
	}

	method generate(){
		generate_clazz(application, null);
	}

</xss:class>