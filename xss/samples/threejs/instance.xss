<xss:code>

//render properties
if (it.properties)
{
    for(var prop in it.properties)
    {
        if (prop.dont_init)
            continue;
			
		string prop_name;
		
		if(it.id == "application"){
			if(prop.real_name)
				prop_name = "var " + prop.real_name;
			else
				prop_name = "var " + prop.name;
		}
		else{
			if(prop.real_name)
				prop_name = it.id + "." + prop.real_name; 
			else
				prop_name = it.id + "." + prop.name;			
		}
        if (prop.set && prop.get)
        {
            out(indent = 0)
            {
                <xss:e value="prop_name"/>_get = function ()
                {
                    <xss:e>prop.get.generate()</xss:e>
                };

                <xss:e value="prop_name"/>_set = function (value)
                {
                    <xss:e>prop.set.generate()</xss:e>
                };
            }
        }
        else if (prop.set)
        {
            out(indent = 0)
            {
                <xss:e value="prop_name"/> = <xss:e value=prop.value/>;

                <xss:e value="prop_name"/>_set = function (value)
                {
                    <xss:e value="prop_name"/> = value;
                    <xss:e value=prop.set.generate()/>
                }
            }
        }
        else if (prop.get)
        {
            out(indent = 0)
            {
                <xss:e>prop.name</xss:e>_get = function ()
                {
                    <xss:e>prop.get.generate()</xss:e>
                };
            }
        }
        else
        {
            //this is a plain property, unless the class specify otherwise
            //we will also try to initialize it
            
            var value = compiler.evaluate_property(it, prop.name);
            if (prop.set_fn)
            {
                if (value != null) //dont initialize empty values
                {
                    out(indent = 0)
                    {
                        <xss:e value="it.id"/>.<xss:e value="prop.set_fn"/>(<xss:e>prop.value</xss:e>);
                    }
                }
            }
            else
            {
                if (value != null)
                {
                    out(indent = 0)
                    {
                        <xss:e value="prop_name"/> =  <xss:e>prop.value</xss:e>;
                    }
                }
            }
        }
    }    
}

if (it.methods)
{
    for(var mthd in it.methods)
    {
        string mthd_name = mthd.name;
		out(){
		function <xss:e value="mthd_name"/> (<xss:e>mthd.args.generate()</xss:e>) 
			{
				<xss:e>mthd.code.generate()</xss:e>
			}
		}
    }
}    

//render events as functions provided by jquery
if (it.events)
{	
	for(var ev in it.events)
    {
		//remember every event could be implemented multiple times
        string ev_name = ev.name;
		//string ev_parent = ev.parent.name;
		var    impls   = ev.impls;
		var    evargs  = ev.args;
		if(ev_name == "init"){
			for(var evimpl_init in impls){
				out()
				{
				<xss:e>evimpl_init.generate()</xss:e>
				}
			}	
		}else if(ev_name == "animate"){
			out(){			
			function render() <xss:open_brace/>   
				renderer.clear();
			}	
			for(var evimpl_anim in impls){
				out()
				{
				<xss:e>evimpl_anim.generate()</xss:e>
				}
			}	
			out()
			{
			renderer.render( scene, camera );
			<xss:close_brace/>
			}
			if(application.sound){
				out(){	
				soundRenderer = new THREE.SoundRenderer();		
				document.body.appendChild( soundRenderer.domElement );
				}
			}
		}else{
		if(ev_name == "mousein" || ev_name == "mouseout"){
			out(indent = 0){
				document.addEventListener( 'mousemove', <xss:e value="ev_name"/>_<xss:e value="it.id"/>, false );
				function <xss:e value="ev_name"/>_<xss:e value="it.id"/> (event)
				<xss:open_brace/>    
			}
			if(ev_name == "mousein"){
			  if(it.id != "application"){				
				out(){					
				event.preventDefault();
				var vector = new THREE.Vector3( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1, 0.5 );
				projector = new THREE.Projector();
				projector.unprojectVector( vector, camera );
				var ray = new THREE.Ray( camera.position, vector.subSelf( camera.position ).normalize() );
				var intersects = ray.intersectObject( <xss:e value="it.id"/> );
				if ( intersects.length > 0 ) 
				<xss:open_brace/>   
				}
				for(var evimpl_1 in impls)
				{
					out()
					{
					<xss:e>evimpl_1.generate()</xss:e>
					}
				}
				out()
				{
			     <xss:close_brace/>
				<xss:close_brace/>
				}
			  }
			}else{
				if(it.id != "application"){				
				out(){
				event.preventDefault();
				var vector = new THREE.Vector3( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1, 0.5 );
				projector = new THREE.Projector();
				projector.unprojectVector( vector, camera );
				var ray = new THREE.Ray( camera.position, vector.subSelf( camera.position ).normalize() );
				var intersects = ray.intersectObject( <xss:e value="it.id"/> );
				if ( !intersects.length > 0 ) 
				<xss:open_brace/>   
				}
				for(var evimpl_2 in impls)
				{
					out()
					{
					<xss:e>evimpl_2.generate()</xss:e>
					}
				}
				out()
				{
			     <xss:close_brace/>
				<xss:close_brace/>
				}
			  }
			}
		}
		else{
			out(indent = 0){
			document.addEventListener( '<xss:e value="ev_name"/>', <xss:e value="ev_name"/>_<xss:e value="it.id"/>, false );
			function <xss:e value="ev_name"/>_<xss:e value="it.id"/> (event)
			<xss:open_brace/>    
			}
			if(it.id != "application"){			
				out(){
				var x = event.clientX;
				var y = event.clientY;
				}				
				out(){
				event.preventDefault();
				var vector = new THREE.Vector3( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1, 0.5 );
				projector = new THREE.Projector();
				projector.unprojectVector( vector, camera );
				var ray = new THREE.Ray( camera.position, vector.subSelf( camera.position ).normalize() );
				var intersects = ray.intersectObject( <xss:e value="it.id"/> );
				if ( intersects.length > 0 ) 
				<xss:open_brace/>   
				}			
				out(){
				var x = event.clientX;
				var y = event.clientY;
				}				
				for(var evimpl in impls){
					out()
					{
					<xss:e>evimpl.generate()</xss:e>
					}
				}
				out()
				{
			    <xss:close_brace/>
				}
			}
			else{			
				out(){
				var x = event.clientX;
				var y = event.clientY;
				}				
				for(var evimpl_app in impls){
					out()
					{
					<xss:e>evimpl_app.generate()</xss:e>
					}
				}
			}
			out()
			{
			<xss:close_brace/>;
			}
		}
		}
	}
}
</xss:code>
