<xss:code>

for(var res in application.resources){
	if(res.class == "composite_material"){
		out(){
		var <xss:e value = "res.id"/> = [];
		}
		for(var mat in res.children){
			if(mat.class == "basic_material")
				out(){
				<xss:e value = "res.id"/>.push(new THREE.MeshBasicMaterial(<xss:open_brace/>
				}
			if(mat.class == "lambert_material")
				out(){
				<xss:e value = "res.id"/>.push(new THREE.MeshLambertMaterial(<xss:open_brace/>
				}
			if(mat.class == "phong_material")
				out(){
				<xss:e value = "res.id"/>.push(new THREE.MeshPhongMaterial(<xss:open_brace/>
				}
			if(mat.class == "normal_material")
				out(){
				<xss:e value = "res.id"/>.push(new THREE.MeshNormalMaterial(
				}
			if(mat.class == "face_material")
				out(){
				<xss:e value = "res.id"/>.push(new THREE.MeshFaceMaterial(
				}
			if(mat.color!=null) out(){color:<xss:e value = "mat.color"/>,}
			if(mat.map!=null) out(){map:<xss:e value = "mat.map"/>,}
			if(mat.wireframe!=null) out(){wireframe:<xss:e value = "mat.wireframe"/>,}
			if(mat.wireframe_linewidth!=null) out(){wireframeLinewidth:<xss:e value = "mat.wireframe_linewidth"/>,}
			if(mat.opacity!=null) out(){opacity:<xss:e value = "mat.opacity"/>,}
			if(mat.texture_src!=null) out(){map:THREE.ImageUtils.loadTexture('<xss:e value = "mat.texture_src"/>'),}
			if(mat.shading!=null) out(){shading:<xss:e value = "mat.shading"/>,}
			if(mat.vertex_colors!=null) out(){vertexColors:<xss:e value = "mat.vertex_colors"/>,}
			if(mat.env_map!=null) out(){envMap:<xss:e value = "mat.env_map"/>,}
			if(mat.combine!=null) out(){combine:<xss:e value = "mat.combine"/>,}
			if(mat.reflectivity!=null) out(){reflectivity:<xss:e value = "mat.reflectivity"/>,}
			if(mat.shininess!=null) out(){shininess:<xss:e value = "mat.shininess"/>,}
			if(mat.specular!=null) out(){specular:<xss:e value = "mat.specular"/>,}
			if(mat.transparent!=null) out(){transparent:<xss:e value = "mat.transparent"/>,}
			if(mat.class == "basic_material" || mat.class == "lambert_material" || mat.class == "phong_material")
				out(){
				<xss:close_brace/>
				}
			out(){
			));
			}
		}
	}else
	if(res.class == "basic_material" || res.class == "lambert_material" || res.class == "phong_material"){
		if(res.class == "basic_material") out(){var <xss:e value = "res.id"/> = new THREE.MeshBasicMaterial(<xss:open_brace/>}
		if(res.class == "lambert_material") out(){var <xss:e value = "res.id"/> = new THREE.MeshLambertMaterial(<xss:open_brace/>}
		if(res.class == "phong_material") out(){var <xss:e value = "res.id"/> = new THREE.MeshPhongMaterial(<xss:open_brace/>}
		if(res.color!=null) out(){color:<xss:e value = "res.color"/>,}
		if(res.map!=null) out(){map:<xss:e value = "res.map"/>,}
		if(res.wireframe!=null) out(){wireframe:<xss:e value = "res.wireframe"/>,}
		if(res.wireframe_linewidth!=null) out(){wireframeLinewidth:<xss:e value = "res.wireframe_linewidth"/>,}
		if(res.opacity!=null) out(){opacity:<xss:e value = "res.opacity"/>,}
		if(res.texture_src!=null) out(){map:THREE.ImageUtils.loadTexture(<xss:e value = "res.texture_src"/>),}
		if(res.shading!=null) out(){shading:<xss:e value = "res.shading"/>,}
		if(res.vertex_colors!=null) out(){vertexColors:<xss:e value = "res.vertex_colors"/>,}
		if(res.env_map!=null) out(){envMap:<xss:e value = "res.env_map"/>,}
		if(res.combine!=null) out(){combine:<xss:e value = "res.combine"/>,}
		if(res.reflectivity!=null) out(){reflectivity:<xss:e value = "res.reflectivity"/>,}
		if(res.shininess!=null) out(){shininess:<xss:e value = "res.shininess"/>,}
		if(res.specular!=null) out(){specular:<xss:e value = "res.specular"/>,}
		if(res.transparent!=null) out(){transparent:<xss:e value = "res.transparent"/>,}
		out(){
			<xss:close_brace/>);
		}			
	}else
	if(res.class == "normal_material"){ 
		out(){
		var <xss:e value = "res.id"/> = new THREE.MeshNormalMaterial()
		}
	}else
	if(res.class == "face_material"){ 
		out(){
		var <xss:e value = "res.id"/> = new THREE.MeshFaceMaterial()
		}
	}else
	if(res.class == "particle_material"){ 
		out(){
		var <xss:e value = "res.id"/> = new THREE.MeshParticleMaterial(<xss:open_brace/>
		}
		if(res.color!=null) out(){color:<xss:e value = "res.color"/>,}
		if(res.program == "program_fill"){
			 out(){
				program:function ( context ) {
					context.beginPath();
					context.arc( 0, 0, 1, 0, Math.PI * 2, true );
					context.closePath();
					context.fill();
				}
			}
		}
		if(res.program == "program_stroke"){
			 out(){
				program:function ( context ) {
					context.beginPath();
					context.arc( 0, 0, 1, 0, Math.PI * 2, true );
					context.closePath();
					context.stroke();
				}
			}
		}				
	}else
	if(res.class == "sound"){
		out(){
		var <xss:e value = "res.id"/> = new THREE.Sound(<xss:e value = "res.source"/>,<xss:e value = "res.radius"/>,
														<xss:e value = "res.volume"/>,<xss:e value = "res.loop"/>);
		<xss:e value = "res.id"/>.play();
		}
	}else
	if(res.class == "video"){
		out(){
		var <xss:e value = "res.id"/> = document.getElementById( '<xss:e value = "res.id"/>' );
		}
	}else
	if(res.class == "texture"){
		out(){
		var <xss:e value = "res.id"/> = new THREE.Texture ( <xss:e value = "res.image"/> );
		}
	}else
	if(res.class == "canvas_image"){
		out(){
		var <xss:e value = "res.id"/> = document.createElement( 'canvas' );		
		}
		if(res.width!=null) out(){<xss:e value = "res.id"/>.width = <xss:e value = "res.width"/>;}
		if(res.height!=null) out(){<xss:e value = "res.id"/>.height = <xss:e value = "res.height"/>;}
		for(var child in res.children){
			if(child.class == "image_context"){
				out(){
				var <xss:e value = "child.id"/> = <xss:e value = "res.id"/>.getContext( '2d' );	
				}
				if(child.fill_style!=null) out(){<xss:e value = "child.id"/>.fillStyle('<xss:e value = "child.fill_style"/>');}
				if(child.fill_rect!=null) out(){<xss:e value = "child.id"/>.fillRect(<xss:e value = "child.fill_rect"/>);}
				for(var context_child in child.children){
					if(context_child.class == "linear_gradient"){
						out(){
						var <xss:e value = "context_child.id"/> = <xss:e value = "child.id"/>.createLinearGradient( <xss:e value = "context_child.gradient_data"/> );	
						}
						for(var gradient_child in context_child.children){
							out(){
							<xss:e value = "context_child.id"/>.addColorStop(<xss:e value = "gradient_child.color_data"/>);
							}
						}
					}
				}
			}			
		}
	}
}

</xss:code>