<!DOCTYPE html>

<html>

<head>

<title><xss:e value = "application.title"/></title>

</head>

<body>
<style type="text/css">
	body{
	 <xss:marker id="css_style"/>
	}
</style>

<xss:marker id="dependencies"/>

<xss:code>

if(!application.width) 
	application.width = "window.innerWidth";
if(!application.height) 
	application.height = "window.innerHeight";
	
if(application.background)
	out(marker = "css_style"){
	background:<xss:e value = "application.background"/>;
	}
out(){
<script type="text/javascript">		
}
</xss:code>
var ui_;

if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
var renderer = new THREE.WebGLRenderer( { antialias: false } );
var canvas_position = {x:0, y:0};
var active_camera;
var g_elapsed = -1;
var g_delta = 0.0;	
var scene = new THREE.Scene();
var streamer;
var app_width = <xss:e value="application.width"/>;
var app_height = <xss:e value="application.height"/>;
<xss:marker id="variables"/>
var application = {};
application.events = new ev.EventHolder();

<xss:code>
    compiler.inject("render_initialization");
</xss:code>
// --------RESOURCES---------
<xss:code>
    compiler.inject("render_resources");	
</xss:code>
// --------RESOURCES---------

soundRenderer = new THREE.SoundRenderer();		
document.body.appendChild( soundRenderer.domElement );
renderer.setSize( app_width, app_height );

function render() {
canvas_position = getElementPosition(renderer.domElement);
var now   = new Date().getTime();
if (g_elapsed < 0)
    g_delta = 0; //first update
else
g_delta  = now - g_elapsed;  
g_elapsed = now; 

<xss:code>
	compiler.inject("render_update");
</xss:code>

application.events.dispatch("updates", []);	
<xss:marker id="render_function"/>	
application.events.dispatch("switch_cameras", []);

}

<xss:marker id="threejs_variables"/>

<xss:code>
	compiler.inject("render_types");
	compiler.render_app_types("../common-js/resig-class.xss");
</xss:code>

threejs_load_resources(streamer, function()
{
<xss:code>
	compiler.inject("render_instances");
	compiler.inject("render_inst_elems");	
	compiler.xss("../common-js/instance.xss", application);
</xss:code>

var event_manager = new ev.ThreeEventManager();

document.onmousemove = function(ev)
{
	event_manager.mousemove(ev.clientX, ev.clientY);                  
};
document.onmousedown = function(ev)
{
	event_manager.mousedown(ev.clientX, ev.clientY);                  
};
document.onmouseup = function(ev)
{
	event_manager.mouseup(ev.clientX, ev.clientY);		
};
document.onkeydown = function(ev)
{
	event_manager.keydown(ev.keyCode);                  
};
document.onkeyup = function(ev)
{
	event_manager.keyup(ev.keyCode);                  
};
document.onkeypress = function(ev)
{
	event_manager.keypress(ev.keyCode);                  
};

application.events.dispatch("init", []);
	
document.body.appendChild( renderer.domElement );
animate();
});
function animate() {	
	requestAnimationFrame( animate );
	render();	
}

</script>

</body>

</html>

<xss:code>
    //process dependencies
    var dependencies = compiler.get_dependencies();
    var default_path = project.js_path;
    if (!default_path)
        default_path = "../js";
    
    array non_shared = [];
    for(var dep in dependencies)
    {
        
        if (dep.shared)
        {
            //shared libraries will be assumed to be at the default library path 
            compiler.xss("../common-js/dependency.xss", dep, path = default_path, marker = "dependencies");
        }
        else
        {
            //let the idioms decide
            compiler.inject("compile_dependency", dep);
            non_shared += dep;
        }
    }

    for(var ndep in non_shared)
    {
        //it is understood that dependencies will come out of
        //compile with their full path
        compiler.log("dependency: " + ndep.href);
        compiler.xss("../common-js/dependency.xss", ndep, marker = "dependencies");
    }
</xss:code>
