<xss:parameter id="it"/>

var <xss:e value="it.id"/> = $("#<xss:e value="it.id"/>");
<xss:code>

//render properties
for(var prop in it.properties)
{
    if (prop.dont_init)
        continue;
    
    string prop_name = it.id + "." + prop.name;

    if (prop.set && prop.get)
    {
        out(indent = 0)
        {
            <xss:e value="prop_name"/>_get = function ()
            {
                <xss:e>prop.get.generate()</xss:e>
            };

            <xss:e value="prop_name"/>_set = function (value)
            {
                <xss:e>prop.set.generate()</xss:e>
            };
        }
    }
    else if (prop.set)
    {
        out(indent = 0)
        {
            <xss:e value="prop_name"/> = <xss:e value="prop.generate_value()"/>;

            <xss:e value="prop_name"/>_set = function (value)
            {
                <xss:e value="prop_name"/> = value;
                <xss:e value="prop.set.generate()"/>
            }
        }
    }
    else if (prop.get)
    {
        out(indent = 0)
        {
            <xss:e>prop.name</xss:e>_get = function ()
            {
                <xss:e>prop.get.generate()</xss:e>
            };
        }
    }
    else
    {
        //this is a plain property, unless the class specify otherwise
        //we will also try to initialize it
            
        //but first we'll check arrays
        string value;
        if (prop.type.is_array)
        {
            value = compiler.genid('__a');
            out()
            {
                var <xss:e v="value"/> = 
                [
            }

            for(var obj in prop.value.children)
            {
                out()
                {
                    <xss:file output="inline" src="object.xss">
                        <parameter name="obj"/>
                    </xss:file>,
                }
            }

            out()
            {
                ];
            }
        }
        else if (prop.type.is_object)
        {
            value = compiler.xss("object.xss", obj = prop.value);
        }
        else
        {
            value = prop.render_value();
        }
                
        if (value != null) //dont initialize empty values
        {
            if (prop.set_fn)
            {
                out(indent = 0)
                {
                    <xss:e value="it.id"/>.<xss:e value="prop.set_fn"/>(<xss:e>value</xss:e>);
                }
            }
            else
            {
                out(indent = 0)
                {
                    <xss:e value="prop_name"/> =  <xss:e>value</xss:e>;
                }
            }
        }
            
    }
}    

for(var mthd in it.methods)
{
    if (mthd.is_native)
        continue;

    string mthd_name = it.id + "." + mthd.name;
	out(indent = 0)
	{
		<xss:e value="mthd_name"/> = function(<xss:e>mthd.args.generate()</xss:e>) 
		{
			<xss:e>mthd.code.generate()</xss:e>
		};
	}
}

//render events as functions provided by jquery
for(var ev in it.events)
{
	//remember every event could be impemented multiple times
    string ev_name = it.id + "." + ev.name;
	var    impls   = ev.impls;
	var    evargs  = ev.args;
		
	//generate functions
	out(indent = 0)
	{
		<xss:e value="ev_name"/> = function()
		<xss:open_brace/>    
	}
		
    for(var evimpl in impls)
	{
		out(indent = 1)
		{
			<xss:e>evimpl.generate()</xss:e>
		}
	}

	out(indent = 0)
	{
		<xss:close_brace/>;
	}
}
</xss:code>
