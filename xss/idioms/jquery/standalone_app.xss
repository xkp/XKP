<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>TITLE</title>
<script type="text/javascript" src="../js/jquery-1.7.1.min.js"></script>
<script type="text/javascript" src="../js/jquery-ui-1.8.18.custom.min.js"></script>
<script type="text/javascript" src="../js/jquery-idiom.js"></script>
<link rel="stylesheet" href="../css/ui-lightness/jquery-ui-1.8.18.custom.css">
<xss:marker id="includes"/>

<script type="text/javascript">
$(function() {
	<xss:code>
	//generate application code	
    compiler.xss("../common-js/instance.xss", application);

	compiler.inject("render_instances");
    </xss:code>
});
</script>

<style>
    <xss:marker id="css"/>
</style>
</head>

<body>
    <xss:class>
    method tag_properties(var component)
    {
        string result = "";
        if (component.id != "")
        {
            result = "id='" + component.id + "'";
        }
            
        return result;
    }
    
    method render_component(var component)
    {
        if (component.type.html_renderer)
        {
			string file_renderer = "class.xss/" + component.type.html_renderer;
			compiler.xss(file_renderer, component);
            return;
        }
        
        out()
        {
            <<xss:e value="component.tag_name"/> <xss:e value="tag_properties(component)"/>>
        }
        
        if (component.insert_text)
        {
            out(dont_break = true)
            {
                <xss:e value="component.text"/> </<xss:e value="component.tag_name"/>>
            }      
        }
        else //render children, recursively
        {
            if (component.children)
            {
                for(var child in component.children)
                {
                    render_component(child);
                }
            }
            
            //close the tag
            out()
            {
                </<xss:e value="component.tag_name"/>>
            }
        }
    }

    on render()
    {
        //recursively generate child components
		application.tag_name = "div";
        render_component(application);
        
        //render css after all processing
	    compiler.inject("render_css");
    }
    </xss:class>
    <xss:code>
        //insert dependencies after everything has been processed
        
        var dependencies = compiler.get_dependencies();
        for(var dep in dependencies)
        {
            out(marker = "includes")
            {
                <script type="text/javascript" src="<xss:e v="dep.href"/>"></script>
            }
        }
    </xss:code>    
</body>
</html>
