<xss:parameter id="prop"/>
<xss:code>
//declares an object property
string prop_name = prop.output_id;
string type_name = compiler.type_to_string(prop.property_type);

if (prop.is_const)
{
    out()
    {
        public const <xss:e v="type_name"/> <xss:e v="prop_name"/> = <xss:e v="compiler.expression_to_string(prop.value)"/>;
    }
}
else
{
	string getter	 = "";
	string setter	 = "";
    bool   has_field = false;
	
    if (prop.value)
        has_field = true;
    
	if (prop.has_get_code && prop.has_set_code)
    {
        getter = "get {" + compiler.code_to_string(prop.get_code) + "}";
        setter = "set {" + compiler.code_to_string(prop.set_code) + "}";
    }
    else if (prop.has_get_code)
    {
        getter = "get {" + compiler.code_to_string(prop.get_code) + "}";
        setter = "";
    }
    else if (prop.has_set_code)
    {
        has_field = true;
        getter = "get { return __" + prop_name + ";}";
        setter = "set {" + compiler.code_to_string(prop.set_code) + " __" + prop_name + " = value;}";
    }
    else
    {
        //plain
        if (has_field)
        {
            getter = "get { return __" + prop_name + ";}";
            setter = "set { __" + prop_name + " = value;}";
        }
        else
        {
            getter = "get;";
            setter = "set;";
        }
    }

    if (has_field)
    {
		string value_str = "";
		if (prop.value)
			value_str = " = " + compiler.expression_to_string(prop.value);

		out()
		{
			private <xss:e v="type_name"/> __<xss:e v="prop_name"/> <xss:e v="value_str"/>;
		}
    }

    out()
    {
        public <xss:e v="type_name"/> <xss:e v="prop_name"/>
        {
            <xss:e v="getter"/>
            <xss:e v="setter"/>
        }
    }
}
</xss:code>
