var http = require("http");
var url  = require("url");
var fs = require('fs');
var sessions = require("sessions");
require("./smart.min.js");

var application = {};

//init sessions
SessionManager = new sessions();
  
SessionManager.on("expired", function(sid){
    if (application.session_expired)
    {
        application.session_expired(sid);
    }
});
    
<xss:code>
    compiler.inject("render_initialization");
</xss:code>

<xss:code>
//preprocess utility methods (those who aren't services)
//to determine whether they are forked
array<object> services = application.find_by_type("service");

for(var service_methd in application.methods)
{
    //hookup
    var service_code   = service_methd.code;
    service_code.owner = service_methd;

    //find out whether these are services or utilities
    bool   is_service = false;
    object owner_service;
    for(var service in services)
    {
        if (service.id == service_methd.id)
        {
            is_service = true;
            owner_service = service;
            break;
        }
    }

    if (is_service)
    {
        service_methd.wax_service = true;
        service_methd.src         = owner_service;
        wax_compiler.pre_process_args(service_methd);
        continue;
    }

    service_code.check_fork(service_methd);

    if (service_code.forked)
        service_methd.add_parameter("return_function");
}

//preprocess pages so a method gets added
//to the application per page

array<object> pages = application.find_by_type("page");
for(var page in pages)
{
    var events     = page.get_event_code("render");
    var event_args = page.get_event_args("render");

    if (events.size == 0)
        continue;

    var code  = null;
    if (events.size > 1)
        compiler.error("web pages expect a single render event");
    else if (events.size > 0)
        code  = events[0];

    page.has_code = true;
    var methd = wax_compiler.compile_page(page, code, event_args);
    application.add_method(page.id, methd);
}

//render 'em
compiler.xss("../common-js/instance.xss", application);

//render pages without code
for(var cpage in pages)
{
    if (cpage.has_code)
        continue;

    if (!cpage.src && !cpage.application)
        compiler.error("pages must have code, src, or application", page = cpage.id);
                
    out()
    {
        application.<xss:e v="cpage.id"/> = function(request, response)
        {
            response.end("<xss:e v="compiler.escape_file(cpage.src)"/>");
        }
    }
}

</xss:code>

application.init = function()
{
    <xss:code>
    //render initializers
    if (application.initializers)
    {
        for(var initializer in application.initializers)
        {
            if (initializer.renderer)
                compiler.xss(initializer.renderer, initializer);        
        }
    }

    var fs = application.find("file_server");
    if (fs)
    {
        string webroot = fs.webroot;
        if (!webroot)
            compiler.error("File server requires a webroot attribute");

        out()
        {
            var static = require('node-static');
            this.file_server = new(static.Server)('<xss:e v="webroot"/>', { cache: 7200 });
        }
    }
    </xss:code>
}

application.init();
http.createServer(function(request, response) 
{
    var pathname = url.parse(request.url).pathname;

    <xss:code>
    bool first = true;
    for(var i in application.children)
    {
        if (i.class_name == "web_service" || i.class_name == "file_server")
            continue; //ignore

        if (first)
            first = false;
        else 
            compiler.out(" else ");

        string path = i.id;
        if (i.home)
            path = "";

        compiler.out("if (pathname == '/" + path + "')");
        compiler.out("{");

        if (i.class_name == "service" || i.class_name == "page")
        {
            compiler.out("application." + i.id + "(request, response);");
        }
        else compiler.error("Only pages and services are supported", found = i.class_name);

        compiler.out("}");
    }

    var fs = application.find("file_server");
    if (fs)
    {
        out()
        {
            else
            {
                application.file_server.serve(request, response, function (err, res) {
                    if (err) { 
                        console.error("> Error serving " + request.url + " - " + err.message);
                        response.writeHead(err.status, err.headers);
                        response.end();
                    } 
                });            
            }
        }
    }
    
    </xss:code>
}).listen(8888);