<xss:code>
	compiler.log("Rendering Android project...");
	
	//ERROR: follow line dispatch assert linker.cpp:1576
	//compiler.log(compiler.output_path());

	var appOptions = compiler.options;
	string appOutputPath = compiler.output_path();
	
	string base_name_space = "xkp.android";
	string appName = "DefaultAndroidApplication";
	if(application.name)
		appName = application.name;
	
	int targetAPILevel = 6;
	int minAPILevel = 3;
	if(appOptions.android_api_level)
	{
		int apiL = appOptions.android_api_level;
		
		if(apiL >= minAPILevel && apiL < 13)
		{
			targetAPILevel = apiL;
			compiler.log("API Level = " + targetAPILevel);
		}
		else
		{
			compiler.error("The number of Android API level version is not correct", android_api_level = apiL);
		}
	}
	
	bool bSwitcher = false;
	bool bReplicator = false;
	
	for(var inst in android.instances)
	{
		string id = inst.id;
		if(id == "")
			id = compiler.genid(inst.type.id);
		
		//inst.output_id = "priv_" + id;
		inst.output_id = id;
		
		if(inst.type.id == "switcher")
			bSwitcher = true;
		
		if(inst.type.id == "replicator")
			bReplicator = true;
	}
	
	//inject idiom events
	compiler.inject("render_types", app = appName, bns = base_name_space);
	
	//render project files
	string output_filename;
	output_filename = appName + "/" + "AndroidManifest.xml";
	compiler.xss("AndroidManifest.xml.xss", output_file = output_filename, appName, base_name_space, minAPILevel, targetAPILevel);
	
	output_filename = appName + "/src/xkp/android/" + appName + "/Act" + appName + ".java";
	compiler.xss("script.java.xss", output_file = output_filename, clazz = android, appName = appName, base_name_space = base_name_space, is_type = false);
	
	output_filename = appName + "/src/xkp/android/" + appName + "/XKPLayout.java";
	compiler.xss("xkpLayout.java.xss", output_file = output_filename, appName = appName, base_name_space = base_name_space);
	
	output_filename = appName + "/res/values/strings.xml";
	compiler.xss("stringValues.xml.xss", output_file = output_filename);
	
	//inject copy of default files events
	string path_libs = "/src/xkp/android/libs/";
	string abs_path_libs = appName + path_libs;
	compiler.inject("copy_default_files", app = appName, bns = base_name_space, plibs = abs_path_libs);
	
	output_filename = appName + "/res/layout/main.xml";
	compiler.xss("layout.xml.xss", output_file = output_filename, appName = appName, base_name_space = base_name_space, clazz = application);
	
	//TODO: implement these two components (replicator & switch) with script for component like this
	//      maybe with a property inside components
	if(bReplicator)
	{
		output_filename = appName + "/src/xkp/android/" + appName + "/XKPReplicator.java";
		compiler.xss("xkpReplicator.java.xss", output_file = output_filename, appName);
		
		output_filename = appName + "/src/xkp/android/" + appName + "/XKPObject.java";
		compiler.xss("xkpObject.java.xss", output_file = output_filename, appName);
	}
	
	if(bSwitcher)
	{
		output_filename = appName + "/src/xkp/android/" + appName + "/XKPSwitcher.java";
		compiler.xss("xkpSwitcher.java.xss", output_file = output_filename, appName);
	}
	
	if(appOptions.android_project_type == "eclipse")
	{
		output_filename = appName + "/" + ".project";
		compiler.xss("eclipseProject.project.xss", output_file = output_filename, appName);
	
		output_filename = appName + "/" + ".classpath";
		compiler.xss("eclipseProject.classpath.xss", output_file = output_filename);
		
		output_filename = appName + "/" + "default.properties";
		compiler.xss("eclipseProject.default.prop.xss", output_file = output_filename, targetAPILevel);
	}
	else
	if(appOptions.android_project_type == "script")
	{
		output_filename = appName + "/build.bat";
		compiler.xss("build.bat.xss", output_file = output_filename, appName, targetAPILevel, appOutputPath);
	}
	else
	{
		compiler.error("Project type is not implemented", android_project_type = appOptions.android_project_type);
	}

</xss:code>
