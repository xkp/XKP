<xss:code>
	compiler.log("Rendering Android project...");
	
	//ERROR: follow line dispatch assert linker.cpp:1576
	//compiler.log(compiler.output_path());

	var appOptions = compiler.options;
	
	string base_namespace = "xkp.android";
	string appName = "DefaultAndroidApplication";
	application.id = String.strip_spaces(application.id);

	if(application.name)
	{
		appName = String.strip_spaces(application.name);
	}
	else
	{
		appName = application.id;
	}
	
	string appOutputPath = compiler.output_path();
	appOutputPath = appOutputPath + "/" + appName;
	
	int targetAPILevel = 6;
	int minAPILevel = 3;
	if(appOptions.android_api_level)
	{
		int apiL = appOptions.android_api_level;
		
		if(apiL >= minAPILevel && apiL < 13)
		{
			targetAPILevel = apiL;
			compiler.log("API Level = " + targetAPILevel);
		}
		else
		{
			compiler.error("The number of Android API level version is not correct", android_api_level = apiL);
		}
	}
	
	application.appName = appName;
	application.targetAPILevel = targetAPILevel;
	application.base_namespace = base_namespace;
	
	string exeExt = "";
	string batExt = "";
	
	string osName = compiler.os();
	if(osName == "windows")
	{
		batExt = ".bat";
		exeExt = ".exe";
	}

	shell(working_path = appOutputPath, shell_cmd = true)
	{
		rm@exeExt -R @appOutputPath/bin 2> /dev/null;
		rm@exeExt -R @appOutputPath/gen 2> /dev/null
	}

	//inject idiom event for render types
	//TRACE: log
	//compiler.log("-> Begin Rendering all types");
	compiler.inject("render_types", bns = base_namespace);
	//TRACE: log
	//compiler.log("-> End Rendering all types");
	
	//render project files
	string output_filename;
	output_filename = appName + "/src/xkp/android/" + appName + "/Act" + appName + ".java";
	compiler.xss("script.java.xss", output_file = output_filename, clazz = android, base_namespace = base_namespace, is_type = false, main = 1);
	
	output_filename = appName + "/res/values/strings.xml";
	compiler.xss("stringValues.xml.xss", output_file = output_filename);
	
	//inject idiom event for copy default files
	string path_libs = "/src/xkp/android/libs/";
	string abs_path_libs = appName + path_libs;
	compiler.inject("copy_default_files", bns = base_namespace, plibs = abs_path_libs);
	
	output_filename = appName + "/res/layout/main.xml";
	compiler.xss("layout.xml.xss", output_file = output_filename, base_namespace = base_namespace, clazz = application);
	
	output_filename = appName + "/" + "AndroidManifest.xml";
	compiler.xss("AndroidManifest.xml.xss", output_file = output_filename, base_namespace, minAPILevel, targetAPILevel);
	
	//td: organize all this muddy of appOptions
	// appOptions.android_project_type = enum {eclipse, ant, apk, others, ...}
	if(appOptions.android_project_type == "eclipse")
	{
		output_filename = appName + "/" + ".project";
		compiler.xss("eclipseProject.project.xss", output_file = output_filename);
	
		output_filename = appName + "/" + ".classpath";
		compiler.xss("eclipseProject.classpath.xss", output_file = output_filename);
		
		output_filename = appName + "/" + "project.properties";
		compiler.xss("eclipseProject.default.prop.xss", output_file = output_filename, targetAPILevel);
	}
	else
	if(appOptions.android_project_type == "apk")
	{
		string android_sdk = compiler.get_env_var("ANDROID_SDK");
		if(android_sdk == "")
			compiler.error("Environment variable is not defined", variable_name = "ANDROID_SDK");

		string java_jdk = compiler.get_env_var("JAVA_JDK");
		if(java_jdk == "")
			compiler.error("Environment variable is not defined", variable_name = "JAVA_JDK");
		
		// generalize path separator for slash (/)
		appOutputPath 	= XSSPath.generic(appOutputPath);
		android_sdk 	= XSSPath.generic(android_sdk);
		//java_jdk		= XSSPath.generic(java_jdk); //win-error when jdk is in c:\Program Files\... because path contain space
		
		//td: extend to other platform: linux
		string javac = java_jdk + "bin/javac.exe";
		
		application.android_sdk = android_sdk;
		application.output_classes = "java.lst";
		application.output_javac_options = "javac.opts";

        string outputClasses = application.output_classes;
        string outputJavacOpts = application.output_javac_options;
    
        compiler.log("Creating .apk bundle file...");
        
        string androidSDKPath   = application.android_sdk;
        string apiPlatform      = androidSDKPath + "/platforms/android-" + targetAPILevel + "/android.jar";

        string output_classes = appName + "/" + application.output_classes;
        string output_javac_options = appName + "/" + application.output_javac_options;
		
        compiler.log("Detecting version of Java Compiler Application...");
		
		array<string> shell_output; 
		array<string> javac_result;
		shell()
		{
			javac_result = @javac -version
		}
		
		if(!javac_result)
			compiler.error("Java Compiler application (javac) is no recognized or isn't defined inside PATH.");
		
		string first_line;
		first_line = javac_result[0];
		
		int pos = String.find_first(first_line, "1.");
		string javac_version = String.substr(first_line, pos, 3);
		application.javac_version = javac_version;
		
		//td: for this error, check version of android_tools and android_platforms_tools
		//    cuz, some new versions work fine with jdk 1.7
		if(javac_version == "1.7")
			compiler.error("Current JDK version is not correct to generate Android applications.", javac_version = javac_version);
    
        shell(working_path = appOutputPath)
        {
            shell_output = aapt@exeExt package -f -I @apiPlatform -M @appOutputPath/AndroidManifest.xml -A @appOutputPath/assets -S @appOutputPath/res -m -J @appOutputPath/gen -F @appOutputPath/bin/resources.ap_
        }

        compiler.xss("javac.options.xss", output_file = output_javac_options, appOutputPath);
        compiler.xss("java.lst.xss", output_file = output_classes, appOutputPath);

        string dxLibPath = "";
        if(application.libraries) dxLibPath = appOutputPath + "/libs";
        
        shell(working_path = appOutputPath)
        {
            javac_result = @javac @@@outputJavacOpts @@@outputClasses;
            shell_output = dx@batExt --dex --output=@appOutputPath/bin/classes.dex @appOutputPath/bin @dxLibPath
        }

        string appBinPath = appOutputPath + "/bin";
        shell(working_path = appBinPath)
        {
            shell_output = aapt@exeExt add @appOutputPath/bin/resources.ap_ classes.dex
        }
        
        string libsParams = "-rj " + appOutputPath + "/libs";
        libsParams = ""; //td: why this?? what happen when exists libraries inside project??
        string password = "xkp.android.projects.2012";
		
		//td: get absolute path of idioms & fix this
        string androidIdiomPath = appOutputPath + "/../../../idioms/android";
		
		//shell_output = apkbuilder@batExt @appOutputPath/bin/@appName.apk -z @appOutputPath/bin/resources.ap_ -f @appOutputPath/bin/classes.dex -rf @appOutputPath/src @libsParams;
        shell(working_path = appOutputPath)
        {
			shell_output = apkbuilder@batExt @appOutputPath/bin/@appName.apk -z @appOutputPath/bin/resources.ap_ -rf @appOutputPath/src @libsParams;
			shell_output = jarsigner -keystore @androidIdiomPath/java.keystore/xkp.android.projects.jks -storepass @password -keypass @password -signedjar @appOutputPath/bin/@appName.apk @appOutputPath/bin/resources.ap_ xkp.android.projects
        }
	}
	else
	{
		compiler.error("Project type is not implemented", android_project_type = appOptions.android_project_type);
	}
</xss:code>
