<xss:parameter id="appName"/>
package com.xkp.android.<xss:e value="appName"/>;

import java.util.ArrayList;
import java.util.Arrays;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;

<xss:marker id="imports"/>

public class Act<xss:e value="appName"/> 
                extends Activity
				<xss:marker id="interfaces"/>
<xss:code>

	//contents
	array<string> imports    = [];
	array<string> interfaces = [];
	array<string> classes	 = [];
	
	for(var inst in android.instances)
	{
		//TRACE: log
		//compiler.log("View: " + inst.id);
		if(inst.id && inst.id != application.id)
		{
			out(indent = 1, marker = "declarations")
			{
                private <xss:e value="inst.type.output_id"/> <xss:e value="inst.output_id"/>;
			}
		}
		
		//find necessary imports without duplicates
		if(inst.imports && !inst.xkpview)
		{
			//TIPS: live is hard, and very long; :)
			//TODO: it's necessary to implement vector, stack, queue and set containers in vm
			for(var i in inst.imports)
			{
				//TRACE: log
				//compiler.log("Import: " + i.import);
				bool found1 = false;
				for(var imp in imports)
				{
					if(imp == i.import)
					{
						found1 = true;
						break;
					}
				}
				
				if(!found1)
				{
					compiler.log("Adding import " + i.import);
					imports += i.import;
					
					out(marker = "imports")
					{
						import <xss:e value="i.import"/>;
					}
				}
			}
		}
		
		//find all classes without duplicates
		if(inst.classes)
		{
			for(var c in inst.classes)
			{
				bool found3 = false;
				for(var cla in classes)
				{
					if(cla == c.name)
					{
						found3 = true;
						break;
					}
				}
				
				if(!found3)
				{
					compiler.log("Adding class " + c.name);
					classes += c.name;
					
					string xss_file = "class.xss/" + c.file_name;
					compiler.xss(xss_file, marker = "defined_class", appName, inst);
				}
			}
		}
	
		//find necessary events interfaces without duplicates
		bool firstTime = true;
		for(var e in inst.events)
		{
			if(e.interface && e.implemented)
			{
				bool found2 = false;
				for(var it in interfaces)
				{
					if(it == e.interface)
					{
						found2 = true;
						break;
					}
				}
				
				if(!found2)
				{
					compiler.log("Adding interface " + e.interface);
					interfaces += e.interface;
					
					if(firstTime)
					{
						out(dont_break = true, indent = 2, marker = "interfaces")
						{
							implements <xss:e value="e.interface"/>
						}
						
						firstTime = false;
					}
					else
					{
						out(dont_break = true, indent = 0, marker = "interfaces")
						{
							, <xss:e value="e.interface"/>;
						}
					}
					
					string ret_type = "void";
					if(e.return_type)
						ret_type = e.return_type;
					
					//TODO: implements call to arguments from classes by event name
					out(indent = 1, marker = "events")
					{
						@Override
						public <xss:e value="ret_type"/> <xss:e value="e.output_id"/>(<xss:e value="e.def_args"/>) <xss:open_brace/>
							switch (v.getId()) <xss:open_brace/>
					}
					
					for(var insti in android.instances)
					{
						for(var e_insti in insti.events)
						{
							if(e_insti.output_id == e.output_id && e_insti.implemented)
							{
								out(indent = 2, marker = "events")
								{
									case R.id.<xss:e value="insti.id"/>:
										<xss:e value="e.output_id"/><xss:e value="insti.id"/>(<xss:e value="e.param_mthd"/>);
										break;
										
								}
							}
						}
					}
					
					out(indent = 1, marker = "events")
					{
							<xss:close_brace/> //switch
							
							return true;
						<xss:close_brace/>
					}
				}
			}
		}
	}
</xss:code>

{
	<xss:marker id="declarations"/>

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        bindViews();
    }
	
    private void bindViews() {
<xss:code>
	for(var inst in android.instances)
	{
		if(inst.id == null)
			continue;
		
		if(inst.id && inst.id != application.id)
		{
			out(indent = 2)
			{
                <xss:e value="inst.output_id"/> = (<xss:e value="inst.type.output_id"/>) findViewById(R.id.<xss:e value="inst.id"/>);
			}
		}
		
		for(var e in inst.events)
		{
			if(e.interface && e.implemented)
			{
				string handler = "set" + e.interface;
				if(e.set_handle)
					handler = e.set_handle;
				
				out(indent = 2)
				{
                    <xss:e value="inst.output_id"/>.<xss:e value="handler"/>(<xss:e value="e.set_param_hnd"/>);
				}
			}
		}
		
		var qprops = inst.query_properties("*");
		for(var p in qprops)
		{
			if(p.set_handle)
			{
				out(indent = 2)
				{
					<xss:e value="inst.output_id"/>.<xss:e value="p.set_handle"/>(<xss:e value="p.set_param_hnd"/>);
				}
			}
		}
	}
</xss:code>
    }
	
<xss:marker id="events"/>
<xss:code>
	//TIP: add application to android instances, 
	//     i don't know is that is good
	android.instances += application;
	for(var inst in android.instances)
	{
		//TRACE: log
		compiler.log("Instance " + inst.output_id + "...");
		if(inst.properties)
		{
			for(var p in inst.properties)
			{
				compiler.xss("../java/property.xss", p, inst.output_id);
			}
		}
		
		if(inst.events)
		{
			for(var e in inst.events)
			{
				string new_id = e.output_id + inst.id;
				compiler.xss("../java/event.xss", e, new_id);
			}
		}
		
		if(inst.methods)
		{
			for(var m in inst.methods)
			{
				compiler.xss("../java/method.xss", m);
			}
		}
	}
</xss:code>

<xss:marker id="defined_class"/>
}
