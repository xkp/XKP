<xss:parameter id="seq"/>
<xss:parameter id="is_class"/>
<xss:parameter id="path"/>

<xss:class>
    method resolve_key(key, key_value, key_index, owner_seq, prop_info, interp)
    {
        //for good measure
        key.value = null;

        if (compiler.parse_expression(key_value))
        {
            //in this case we need to figure out the key values at runtime
            //this code will keep the expression information to be genearted later. 
            //Note: such expressions will be evaluated at sequence's start time 
            
            var info = object();
            info.expr = compiler.render_expression(key_value, owner_seq);
            info.idx  = key_index;
            info.interp = interp;
            
            if (!rendering_instance)
                info.expr = compiler.replace_identifier(info.expr, owner_seq.id, "this__");
            
            owner_seq.key_expressions += info;
        }
        else if (key_value == "@") //convention over configuration
        {
            //same deal, only this time we'll assign the current value 
            //kinda neat
            var nfo = object();
            nfo.expr = compiler.property_get(prop_info.property, prop_info.path);
            nfo.idx  = key_index;
            nfo.interp = interp;
            
            if (!rendering_instance)
                nfo.expr = compiler.replace_identifier(nfo.expr, owner_seq.id, "this__");

            owner_seq.key_expressions += nfo;
        }
        else //assume constants
        {
            key.value = key_value;
        }
    }
    
    method generate_at(at, seq, rendering_instance)
    {
        var seq_id = seq.output_id;
        if (!rendering_instance)
            seq_id = "this";
        else if (path)
            seq_id = path + "." + seq_id;

        float time = at.time;
        for(var itm in at.children)
        {
            if (itm.class_name == "animate")
            {
                var prop_info = compiler.analyze_expression(itm.property, this_ = seq);

                var    prop      = prop_info.property;
                string prop_name = prop_info.property_name;
                string iid       = compiler.genid('__i');
                string path      = prop_info.path;
                
                if (!rendering_instance)
                {
					if (!prop_info.this_property)
                        compiler.error("Sequence class targets must be properties");

                    path = compiler.replace_identifier(path, "this.", "this__.");
                }
                else if (prop_info.this_property)
                {
                    path = compiler.replace_identifier(path, "this.", seq.id + ".");
                }    
                
                string assign = path + "." + prop_name + " = value"; 
                if (prop)
                {
                    assign = compiler.property_set(prop, path, 'value');
                }

                out(indent = 2)
                {
                    var <xss:e v="iid"/> = new ms.state.Interpolator(
                         
                        default_interpolate,
                        function(value)
                        {
                            <xss:e v="assign"/>;
                        },
                        [
                }
                        
                //generate keys
                array keys;
                if (itm.keys)
                {
                    keys = itm.keys;
                }
                else
                {
                    //a simple from/to animation
                    var end     = object();
                    end.t       = itm.in;
                    end.value   = itm.to;
                            
                    var start   = object();
                    start.t     = 0;
                    start.value = itm.from;

                    keys = [start, end];
                }
                        
                float length = 0.0;
                int   idx    = 0;
                for(var key in keys)
                {
                    //td: make time flexible
                    if (key.t > length)
                        length = key.t; 
                            
                    key.t += time;
                    resolve_key(key, key.value, idx, seq, prop_info, iid);       
                    
                    if (key.value == null)
                        key.value = "null";
                        
                    out(indent = 4)
                    {
                        {t: <xss:e v="key.t"/>, value: <xss:e v="key.value"/>},
                    }
                    
                    idx++;
                }

                //close the interpolator 
                out(indent = 2)
                {
                        ]);
                        <xss:e v="seq_id"/>.addHandler(<xss:e v="iid"/>);	              
                            
                }
            }
            else if (itm.class_name == "run")
            {
                if (itm.method)
                {
                    string mid = compiler.genid('__m');
                    string mid_caller = seq.id;
                    if (!rendering_instance)
                        mid_caller = "this__"; 
                        
                    out(indent = 2)
                    {
                        var <xss:e v="mid"/> = new ms.state.Caller(<xss:e v="time"/>,function()
                        {
                            <xss:e v="mid_caller"/>.<xss:e v="itm.method"/>();
                        });
                          
						  <xss:e v="mid_caller"/>.addHandler(<xss:e v="mid"/>);						  
                    }
                }
                else if (itm.sequence)
                {
					string mid_caller1 = seq.id;
                    string sid = compiler.genid('__s');
                    out(indent = 2)
                    {
                        var <xss:e v="sid"/> = new ms.state.Caller(<xss:e v="time"/>,function()
                        {
                            <xss:e v="itm.sequence"/>.start();
                        });
                          
						 <xss:e v="mid_caller1"/>.addHandler(<xss:e v="sid"/>);	
                    }
                }
                else
                {
                    //td: error
                }
            }
        }
    }
            
    method generate_when(itm, seq)
    {
        if (!itm.expr)
            return; //td: error
            
        seq.conditions += itm.expr;
        seq.actions += itm.children;
    }
    
    method generate_every(itm, seq, rendering_instance)
    {
        string aid = compiler.genid("__h");
        
        out()
        {
            var <xss:e v="aid"/> = new ms.state.Every(<xss:e v="itm.t"/>, function(t)
            <xss:open_brace/>
        }
        
        string caller = seq.id;
        if (!rendering_instance)
            caller = "this__"; 

        for(var child in itm.children)
        {
            if (child.class_name == "run") 
            {
                if (child.method)
                {
                    out()
                    {
                        <xss:e v="caller"/>.<xss:e v="child.method"/>();
                    }
                }
                else if (child.sequence)
                {
                    out()
                    {
                         <xss:e v="child.sequence"/>.start();
                    }
                }
                else compiler.log("WARNING: 'run' needs 'method' or 'sequence'");
            }
            else compiler.log("WARNING: 'every' supports only 'run'");
        }

        out()
        {
            <xss:close_brace/>);
            <xss:e v="caller"/>.addHandler(<xss:e v="aid"/>);	                    
        }
    }
            
    method generate_item(itm, seq, rendering_instance)
    {
        if (itm.class_name == "at")         generate_at(itm, seq, rendering_instance);
        else if (itm.class_name == "when")  generate_when(itm, seq);
        else if (itm.class_name == "every") generate_every(itm, seq, rendering_instance);
        else if (itm.class_name == "sequence")
        {
            generate_sequence(itm, seq, true);
        }
        else
        {
            //td: error
        }
    }
    
    method generate_when_actions(array actions, seq_id, seq)
    {
        for(var action in actions)
        {
            if (action.class_name == "run")
            {
                if (action.method)
                {
                    out() 
                    {
                        <xss:e v="seq.id"/>.<xss:e v="action.method"/>();
                    }
                }
                else if (action.sequence)
                {
                    out() 
                    {
                        <xss:e v="seq.id"/>.<xss:e v="action.sequence"/>.start();
                    }
                }
                else
                {
                    //td: error
                    compiler.log("WARNING: You can run methods or sequences, nothing else");
                }
            }
            else
            {
                //td: error
                compiler.log("WARNING: Only run is allowed inside whens");
            }
        }
    }
            
    method generate_sequence(seq, parent, rendering_instance)
    {
        string parent_id = "null";
        string seq_id = seq.output_id;
		
        
        if (path)
          seq_id = path + "." + seq_id;
            
        if (parent)
            parent.subs += seq;

        if (rendering_instance)
        {
            //declare variable on the top level if no path is supplied, could be confusing
            if (!path)
                out(marker = "variables", marker_source = "entry") {var <xss:e v="seq_id"/>;}

            //initialize it here
            out() {<xss:e v="seq_id"/> =} compiler.xss("../common-js/instantiator.xss", seq);
            if (parent)
            {
                //build the instance chain
                parent_id = parent.id;

                var p = parent.parent;
                while(p != null)
                {
                    parent_id = p.id + "." + parent_id;
                    p = p.parent;
                }
            
                seq_id = parent_id + "." + seq.id;
                out(indent = 2)
                {
                    <xss:e v="seq_id"/> = new ms.state.Sequence();
                    <xss:e v="parent_id"/>.push(<xss:e v="seq.id"/>);
					if(seq.loop)
							<xss:e v="seq_id"/>.setloop(true);
				}
				
            }
            
            compiler.xss("../common-js/instance.xss", seq, path = path);
        }
        else
        {
            //render as class
            if (parent)
            {
                out()
                {
                    this.<xss:e v="seq.id"/> = new ms.state.Sequence();
                    this.push(this.<xss:e v="seq.id"/>);
					if(seq.loop)
							this.<xss:e v="seq.id"/>.setloop(true);
                }
            }

            seq_id = "this";
            out(indent = 2)
            {
                var this__ = this;
            }
        }
        

        if (seq.auto_start)
        {
            out(indent = 2)
            {
                <xss:e v="seq_id"/>.start();
            }
        }
                
        out()
        {
            <xss:e v="seq_id"/>.parent_sequence = <xss:e v="parent_id"/>;
        }

        //we'll let our children fill in on what the want done
        seq.conditions      = [];
        seq.actions         = [];
        seq.subs            = [];
        seq.key_expressions = [];
        for(var item in seq.children)
        {
            generate_item(item, seq, rendering_instance);
        }

        if (!seq.key_expressions.empty)
        {
            out(indent = 2)
            {
                <xss:e v="seq_id"/>.events.addListener('start', function()
                <xss:open_brace/>
            }
            
            for(var key_xpr in seq.key_expressions)
            {
                out(indent=3)
                {
                    <xss:e v="key_xpr.interp"/>.keys[<xss:e v="key_xpr.idx"/>].value = <xss:e v="key_xpr.expr"/>;
                }
            }
            
            out(indent = 2)
            {
                <xss:close_brace/>);
            }
        }

        if (!seq.conditions.empty)
        {
            out(indent = 2)
            {
                <xss:e v="seq_id"/>.events.addListener('update',function(elapsed, last)
                <xss:open_brace/>
            }
            
            //check the conditions described on the when clause
            int cond_idx = 0;
            for(var cond in seq.conditions)
            {
                cond = compiler.render_expression(cond, seq);

                out(indent = 3)
                {
                    if (<xss:e v="cond"/>)
                    <xss:open_brace/>
                }
                
                var action_list = seq.actions[cond_idx]; cond_idx++;
                generate_when_actions(action_list, seq_id, seq);
                
                out(indent = 2)
                {
                    <xss:close_brace/>
                }
            }
            
            out(indent = 2)
            {
                <xss:close_brace/>);
            }
        }
    }
            
    on render()
    {
        generate_sequence(seq, null, !is_class);
    }
</xss:class>
