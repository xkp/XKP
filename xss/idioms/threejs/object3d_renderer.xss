<xss:parameter id="obj"/>
<xss:parameter id="type"/>
<xss:parameter id="param_values"/>

<xss:code>	
	if(!type)
		type = obj.type;
	if(!param_values)
	{
		param_values = [];
		if (type.constructor_params)
        {
            for(var param in type.constructor_params)
		    {			                
				if (param.property)
                {
                    var prop = obj.get_property(param.property);
					var tmp = object();
					tmp.id = prop.id;
					if(prop.value != null)
					{									
						if(prop.use_plain_value)
							tmp.value = prop.value;
						else
							tmp.value = prop.render_value();						
					}
					else
					{
						tmp.value = null;
					}
					param_values += tmp;
                }   			                
		    }
        }
	}
		
	if (!obj.material)
        obj.material = "new THREE.MeshBasicMaterial()";
	
	out(marker = "threejs_variables", marker_source = "entry") {var <xss:e v="obj.id"/>;}
	out()
    {
	    <xss:e v="obj.output_id"/>_<xss:e v="obj.class_name"/> = 
		<xss:e v="compiler.instantiate(type, runtime_args = param_values)"/> ;
	}	
	out()
    {
	    <xss:e v="obj.id"/> = new THREE.Mesh(<xss:e v="obj.id"/>_<xss:e v="obj.class_name"/>, <xss:e v="obj.material"/>);
	    scene.addObject(<xss:e value = "obj.id"/>);
		<xss:e v="obj.id"/>.events = new ms.event.EventHolder();
	}	
</xss:code>
