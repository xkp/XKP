<xss:parameter id="clazz"/>

<xss:code>	
	array parent_params = [];
    clazz.instantiator = "instantiator.xss";
	bool super_transform = false;
    out()
    {
        function create_<xss:e v="clazz.id"/>(
    }    
    var c_params = null; 
            if (clazz.super){
                c_params = clazz.super.constructor_params;
				if(!clazz.super.heritable){
					compiler.error("Ancestor class not heritable", class_name = clazz.super.output_id);
				}
				if(clazz.super.id == "transform")
					super_transform = true;
			}
            if (c_params)
            {				
                int idx = 0;				
                for(var p in c_params)
                {
					if (p.property) p.id = p.property;
                    string param_str = p.id;					
                    if (idx > 0) out() {,}                    
                    out() {<xss:e v="param_str"/>}
					var tmp = object();
					tmp.id = param_str;
					tmp.value = param_str;
					parent_params += tmp;
					idx++;
                }
            }    
    out() { ) <xss:open_brace/> 
    
    var <xss:e v="clazz.id"/>;
    }

    if(super_transform)
	{		
		out() 
		{ 		
			<xss:e v="clazz.id"/> = new THREE.Object3D();
			<xss:e v="clazz.id"/>.events = new ms.event.EventHolder();
		}
	}
	else{
		string clazz_renderer = clazz.type.renderer;
        if (!clazz_renderer)
        {
            compiler.error("Class not rendereable", class_name = clazz.type_name);
        }                
        string clazz_path = compiler.idiom_path(clazz, clazz_renderer);
        compiler.xss(clazz_path, clazz, param_values = parent_params, type = clazz.super);			
	}
    
    out()
    {
        var this__ = <xss:e v="clazz.id"/>;
    }

    for(var seq in clazz.instances)
    {		
        if (seq.class_name != "sequence") //td: !!!
            continue; 

        string seq_renderer = seq.type.renderer;
        
        out()
        {
            var <xss:e v="seq.output_id"/>;
        }

        string seq_path = compiler.idiom_path(seq, seq_renderer);
        compiler.xss(seq_path, seq);
		compiler.xss("../common-js/instance.xss", seq);
        
        out()
        {
            <xss:e v="clazz.id"/>.<xss:e v="seq.output_id"/> = <xss:e v="seq.output_id"/>;
        }
        
    }    

    compiler.xss("../common-js/instance.xss", clazz);    

for(var inst in clazz.instances)
    {		
        if (inst.class_name == "sequence") //td: !!!
            continue; 
            
        string inst_renderer = inst.type.renderer;
        if (!inst_renderer)
        {
            compiler.error("Class not rendereable", class_name = inst.type_name);
        }                
        out()
        {
            var <xss:e v="inst.output_id"/>;
        }            
        string inst_path = compiler.idiom_path(inst, inst_renderer);
        compiler.xss(inst_path, inst);
		if(!inst.dont_render)
			compiler.xss("../common-js/instance.xss", inst);
        if(super_transform)
			out()
			{
				<xss:e v="clazz.id"/>.addChild(<xss:e v="inst.output_id"/>);
			}   
		else
			out()
			{
				<xss:e v="clazz.id"/>.<xss:e v="inst.output_id"/> = <xss:e v="inst.output_id"/>;
			}     
    }    
    out()
    {
        return <xss:e v="clazz.id"/>;
        <xss:close_brace/>
    }
</xss:code>
