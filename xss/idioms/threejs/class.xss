<xss:parameter id="clazz"/>

<xss:code>	
    clazz.instantiator = "instantiator.xss";    
    out()
    {
        function create_<xss:e v="clazz.id"/>(
    }    
    var c_params = null; 
            if (clazz.super)
                c_params = clazz.super.constructor_params;							
            if (c_params)
            {				
                int idx = 0;				
                for(var p in c_params)
                {
                    string param_str = p.id;					
                    if (idx > 0) out() {,}                    
                    out() {<xss:e v="param_str"/>}
                    idx++;
                }
            }    
    out() { ) <xss:open_brace/> }    
	out() 
	{ 
		var <xss:e v="clazz.id"/> = new THREE.Object3D();
	}	
    compiler.xss("../common-js/instance.xss", clazz);    
    for(var inst in clazz.instances)
    {
        string inst_renderer = inst.type.renderer;
        if (!inst_renderer)
        {
            compiler.error("Class not rendereable", class_name = inst.type_name);
        }                
        out()
        {
            var <xss:e v="inst.output_id"/>;
        }            
        string path = compiler.idiom_path(inst, inst_renderer);
        compiler.xss(path, inst);
        out()
        {
            <xss:e v="clazz.id"/>.addChild(<xss:e v="inst.output_id"/>);
        }        
    }    
    out()
    {
        return <xss:e v="clazz.id"/>;
        <xss:close_brace/>
    }
</xss:code>
