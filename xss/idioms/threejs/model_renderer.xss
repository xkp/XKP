<xss:parameter id="obj"/>
<xss:parameter id="property_renderer" default="../common-js/property.xss"/>
<xss:parameter id="method_renderer"   default="../common-js/method.xss"/>
<xss:parameter id="event_renderer"    default="event.xss"/>

<xss:code>

if(obj.parent.class_name == "resources"){
	out(marker = "model_src", marker_source = "entry")
		{
			{id:'<xss:e v="obj.id"/>',src:'<xss:e value = "obj.src"/>'},
		}
}else{	
	out(){
	var <xss:e v="obj.src"/>;
	var <xss:e v="obj.src"/>_loader = } compiler.xss("../common-js/instantiator.xss", obj);
	obj.id = obj.src;
	out(){	
		<xss:e value = "obj.src"/>_loader.load(
		<xss:open_brace/>
				model : get_model('<xss:e value = "obj.src"/>') , callback : function( geometry )
			<xss:open_brace/>
				<xss:e v="obj.src"/> = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial());
	}
	//render properties
	for(var prop in obj.properties)
	{
		if (prop.dont_init)
			continue;    
		compiler.xss(property_renderer, prop, obj, is_class = false);
	}    			
	out(){
				scene.addObject(<xss:e v="obj.src"/>);
			<xss:close_brace/> 
		<xss:close_brace/> 
	);	
	}
} 
for(var mthd in obj.methods)
{
    compiler.xss(method_renderer, mthd, obj, is_class = false);
}

//render events as functions
for(var ev in obj.events)
{
    compiler.xss(event_renderer, ev, obj, is_class = false);
}	
</xss:code>
