<xss:parameter id="i"/>

<xss:code>	
		
		bool no_transformation = true;
		if(i.type.super){			
			if(i.type.super.id == "parameter_braces"){				
				compiler.xss("p_braces_render.xss", i);
			}else
			if(i.type.super.id == "meshable"){
				out(){
				var <xss:e v="i.id"/>_<xss:e v="i.class_name"/> =
				}
				compiler.xss("../common-ja/instantiator.xss", i);
				out(){
				var <xss:e v="i.id"/> = new THREE.Mesh(<xss:e v="i.id"/>_<xss:e v="i.class_name"/>,
				<xss:e v="i.materials"/>);
				scene.addObject(<xss:e value = "i.id"/>);
				}
			}else
			if(i.type.super.id == "transformation"){
				compiler.xss("vector3d_renderer.xss", i);
				no_transformation = false;
			}else
			if(i.type.super.id == "light"){
				out(){var <xss:e v="i.id"/> = }compiler.xss("../common-ja/instantiator.xss", i);
				out(){
				;
				scene.addLight(<xss:e value = "i.id"/>);
				}
			}			
		}else{					
			out(){var <xss:e v="i.id"/> = }
			compiler.xss("../common-ja/instantiator.xss", i);						
			}		
		if(i.parent.class_name == "transform" && no_transformation){			
				out(){
				<xss:e v="i.parent.id"/>.addChild(<xss:e v="i.id"/>);
				scene.addObject(<xss:e v="i.parent.id"/>);
				}
			}		
		if(i.class_name == "sound") out(){<xss:e v="i.id"/>.play();}
			
</xss:code>
